#!/usr/bin/env python3

# usage: ./md2html ./src/path/to/file.md

import argparse
import os
import shutil
import subprocess


def main():
    # parse path argument
    parser = argparse.ArgumentParser(
        description="convert a markdown file to html using mdbook"
    )
    parser.add_argument(
        "-p", "--path", help="relative path to markdown file", required=True
    )
    args = parser.parse_args()

    # repository root path
    root = os.path.dirname(os.path.abspath(__file__))

    # src/ directory path
    src = os.path.join(root, "src")

    # md file path
    md = os.path.abspath(args.path)
    md_dir, md_file = os.path.split(md)

    # check if md file path exists
    if not os.path.isfile(md):
        print("error: file not found")
        return

    # check if md file is in src/ directory
    if os.path.commonpath([src, md]) != src:
        print("error: md file not in src/ directory")
        return

    # SUMMARY.md file path
    summary = os.path.join(root, "src", "SUMMARY.md")

    # add md file as section to summary
    with open(summary, "a") as file:
        file.write(f"\n- [{md_file}]({os.path.relpath(md, src)})")

    # run mdbook build
    def build():
        try:
            subprocess.run(
                [os.path.join(root, "build")],
                capture_output=True,
                text=True,
                check=True,
                shell=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"error: mdbook failed to build with {e}")
            return

    build()

    # html file path
    html = os.path.join(
        md_dir.replace(src, os.path.join(root, "docs")),
        f"{os.path.splitext(md_file)[0]}.html",
    )

    # copy the html file to the directory of the md file
    shutil.copy2(html, os.path.dirname(md))

    # undo the modification to the summary
    with open(summary, "r") as file:
        content = file.read()

    content = content.replace(f"\n- [{md_file}]({os.path.relpath(md, src)})", "")

    with open(summary, "w") as file:
        file.writelines(content)

    # run mdbook build again
    build()


if __name__ == "__main__":
    main()
